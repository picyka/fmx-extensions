unit DemoLibrary_Intf;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

{$I RemObjects.inc}

interface

uses
  {vcl:} Classes, TypInfo,
  {RemObjects:} uROXMLIntf, uROClasses, uROClient, uROTypes, uROClientIntf;

const
  { Library ID }
  LibraryUID = '{0028C398-C977-4BED-9D7D-F64B311D70FA}';
  TargetNamespace = '';

  { Service Interface ID's }
  IDemoService_IID : TGUID = '{F373F2C5-952F-44FF-BF91-B430B1FF4A7F}';

type
  TSeekOrigin = Classes.TSeekOrigin; // fake declaration
  { Forward declarations }
  IDemoService = interface;

  DemoArray = class;

  DemoStruct = class;

  { DemoStruct }
  DemoStruct = class(TROComplexType)
  private
    fField1: UnicodeString;
    fField2: Integer;
    fField3: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Field1:UnicodeString read fField1 write fField1;
    property Field2:Integer read fField2 write fField2;
    property Field3:Double read fField3 write fField3;
  end;

  { DemoStructCollection }
  DemoStructCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): DemoStruct;
    procedure SetItems(aIndex: Integer; const Value: DemoStruct);
  public
    constructor Create; overload;
    function Add: DemoStruct; reintroduce;
    procedure SaveToArray(anArray: DemoArray);
    procedure LoadFromArray(anArray: DemoArray);
    property Items[Index: Integer]:DemoStruct read GetItems write SetItems; default;
  end;

  { DemoArray }
  DemoArray_DemoStruct = array of DemoStruct;
  DemoArray = class(TROArray)
  private
    fCount: Integer;
    fItems : DemoArray_DemoStruct;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): DemoStruct;
    procedure SetItems(aIndex: Integer; const Value: DemoStruct);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: DemoStruct; overload;
    function Add(const Value: DemoStruct):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:DemoStruct read GetItems write SetItems; default;
    property InnerArray: DemoArray_DemoStruct read fItems;
  end;

  { IDemoService }
  IDemoService = interface
    ['{F373F2C5-952F-44FF-BF91-B430B1FF4A7F}']
    function GetSum(const A: Integer; const B: Integer): Integer;
    function GetServerTime: DateTime;
    function GetDemoStruct(const Count: Integer): DemoArray;
  end;

  { CoDemoService }
  CoDemoService = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IDemoService; overload;
    class function Create(const aUri: TROUri): IDemoService; overload;
    class function Create(const aUrl: string): IDemoService; overload;
  end;

  { TDemoService_Proxy }
  TDemoService_Proxy = class(TROProxy, IDemoService)
  protected
    function __GetInterfaceName:string; override;

    function GetSum(const A: Integer; const B: Integer): Integer;
    function GetServerTime: DateTime;
    function GetDemoStruct(const Count: Integer): DemoArray;
  end;

implementation

uses
  {vcl:} SysUtils,
  {RemObjects:} uROEventRepository, uROSerializer, uRORes;

{ DemoArray }

procedure DemoArray.Assign(iSource: TPersistent);
var
  lSource: DemoArray;
  i: Integer;
  lItem: DemoStruct;
begin
  if (iSource is DemoArray) then begin
    lSource := DemoArray(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := DemoStruct(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function DemoArray.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(DemoStruct);
end;

class function DemoArray.GetItemClass: System.TClass;
begin
  Result := DemoStruct;
end;

class function DemoArray.GetItemSize: Integer;
begin
  Result := System.SizeOf(DemoStruct);
end;

function DemoArray.GetItems(aIndex: Integer): DemoStruct;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function DemoArray.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure DemoArray.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure DemoArray.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure DemoArray.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure DemoArray.SetItems(aIndex: Integer; const Value: DemoStruct);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure DemoArray.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := DemoStruct.Create;
  FCount := ElementCount;
end;

function DemoArray.GetCount: Integer;
begin
  Result := FCount;
end;

procedure DemoArray.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function DemoArray.Add: DemoStruct;
begin
  Result := DemoStruct.Create;
  Self.Add(Result);
end;

function DemoArray.Add(const Value:DemoStruct): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure DemoArray.ReadComplex(ASerializer: TObject);
var
  lval: DemoStruct;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), DemoStruct, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure DemoArray.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(DemoArray);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], DemoStruct, i);
end;

{ DemoStruct }

procedure DemoStruct.Assign(iSource: TPersistent);
var
  lSource: DemoLibrary_Intf.DemoStruct;
begin
  inherited Assign(iSource);
  if (iSource is DemoLibrary_Intf.DemoStruct) then begin
    lSource := DemoLibrary_Intf.DemoStruct(iSource);

    Self.Field1 := lSource.Field1;
    Self.Field2 := lSource.Field2;
    Self.Field3 := lSource.Field3;
  end;
end;

procedure DemoStruct.ReadComplex(ASerializer: TObject);
var
  l_Field1: UnicodeString;
  l_Field2: Integer;
  l_Field3: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Field1 := Self.Field1;
    try
{$IFDEF UNICODE}
      TROSerializer(ASerializer).ReadUnicodeString('Field1', l_Field1);
{$ELSE}
      TROSerializer(ASerializer).ReadWideString('Field1', l_Field1);
{$ENDIF}
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Field1']));
    end;
    Self.Field1 := l_Field1;
    l_Field2 := Self.Field2;
    try
      TROSerializer(ASerializer).ReadInteger('Field2', TypInfo.otSLong, l_Field2);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Field2']));
    end;
    Self.Field2 := l_Field2;
    l_Field3 := Self.Field3;
    try
      TROSerializer(ASerializer).ReadDouble('Field3', TypInfo.ftDouble, l_Field3);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Field3']));
    end;
    Self.Field3 := l_Field3;
  end
  else begin
    l_Field1 := Self.Field1;
    try
{$IFDEF UNICODE}
      TROSerializer(ASerializer).ReadUnicodeString('Field1', l_Field1);
{$ELSE}
      TROSerializer(ASerializer).ReadWideString('Field1', l_Field1);
{$ENDIF}
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Field1']));
    end;
    Self.Field1 := l_Field1;
    l_Field2 := Self.Field2;
    try
      TROSerializer(ASerializer).ReadInteger('Field2', TypInfo.otSLong, l_Field2);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Field2']));
    end;
    Self.Field2 := l_Field2;
    l_Field3 := Self.Field3;
    try
      TROSerializer(ASerializer).ReadDouble('Field3', TypInfo.ftDouble, l_Field3);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Field3']));
    end;
    Self.Field3 := l_Field3;
  end;
end;

procedure DemoStruct.WriteComplex(ASerializer: TObject);
var
  l_Field1: UnicodeString;
  l_Field2: Integer;
  l_Field3: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(DemoStruct);
    l_Field1 := Self.Field1;
{$IFDEF UNICODE}
    TROSerializer(ASerializer).WriteUnicodeString('Field1', l_Field1);
{$ELSE}
    TROSerializer(ASerializer).WriteWideString('Field1', l_Field1);
{$ENDIF}
    l_Field2 := Self.Field2;
    TROSerializer(ASerializer).WriteInteger('Field2', TypInfo.otSLong, l_Field2);
    l_Field3 := Self.Field3;
    TROSerializer(ASerializer).WriteDouble('Field3', TypInfo.ftDouble, l_Field3);
  end
  else begin
    l_Field1 := Self.Field1;
{$IFDEF UNICODE}
    TROSerializer(ASerializer).WriteUnicodeString('Field1', l_Field1);
{$ELSE}
    TROSerializer(ASerializer).WriteWideString('Field1', l_Field1);
{$ENDIF}
    l_Field2 := Self.Field2;
    TROSerializer(ASerializer).WriteInteger('Field2', TypInfo.otSLong, l_Field2);
    l_Field3 := Self.Field3;
    TROSerializer(ASerializer).WriteDouble('Field3', TypInfo.ftDouble, l_Field3);
  end;
end;

{ DemoStructCollection }
constructor DemoStructCollection.Create;
begin
  inherited Create(DemoStruct);
end;

constructor DemoStructCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function DemoStructCollection.Add: DemoStruct;
begin
  Result := DemoStruct(inherited Add);
end;

function DemoStructCollection.GetItems(aIndex: Integer): DemoStruct;
begin
  Result := DemoStruct(inherited Items[aIndex]);
end;

procedure DemoStructCollection.LoadFromArray(anArray: DemoArray);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure DemoStructCollection.SaveToArray(anArray: DemoArray);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(DemoStruct(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure DemoStructCollection.SetItems(aIndex: Integer; const Value: DemoStruct);
begin
  DemoStruct(inherited Items[aIndex]).Assign(Value);
end;

{ CoDemoService }

class function CoDemoService.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IDemoService;
begin
  Result := TDemoService_Proxy.Create(aMessage, aTransportChannel);
end;

class function CoDemoService.Create(const aUri: TROUri): IDemoService;
begin
  Result := TDemoService_Proxy.Create(aUri);
end;

class function CoDemoService.Create(const aUrl: string): IDemoService;
begin
  Result := TDemoService_Proxy.Create(aUrl);
end;

{ TDemoService_Proxy }

function TDemoService_Proxy.__GetInterfaceName:string;
begin
  Result := 'DemoService';
end;

function TDemoService_Proxy.GetSum(const A: Integer; const B: Integer): Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'DemoLibrary', __InterfaceName, 'GetSum');
    lMessage.Write('A', System.TypeInfo(Integer), A, []);
    lMessage.Write('B', System.TypeInfo(Integer), B, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Integer), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TDemoService_Proxy.GetServerTime: DateTime;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'DemoLibrary', __InterfaceName, 'GetServerTime');
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(DateTime), Result, [paIsDateTime]);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TDemoService_Proxy.GetDemoStruct(const Count: Integer): DemoArray;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'DemoLibrary', __InterfaceName, 'GetDemoStruct');
    lMessage.Write('Count', System.TypeInfo(Integer), Count, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(DemoLibrary_Intf.DemoArray), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

initialization
  RegisterROClass(DemoStruct);
  RegisterROClass(DemoArray);
  RegisterProxyClass(IDemoService_IID, TDemoService_Proxy);


finalization
  UnregisterROClass(DemoStruct);
  UnregisterROClass(DemoArray);
  UnregisterProxyClass(IDemoService_IID);


end.
